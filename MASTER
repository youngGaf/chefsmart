#application that interactes with the user to provide cooking recipes

class Recipe:

    '''Recipe class stores recipes that are later accesed and compared to the user's desired meal''' 

    def __init__(self, MealType, CuisineType, time, ingrediants = [], recipeName = "", instructions = []):

        self.recipeName = recipeName
        self.MealType = MealType
        self.CuisineType = CuisineType
        self.time = time
        self.ingrediants = ingrediants
        self.instructions = instructions 

    '''three areEqual functions are used to compare meal types, cusine types and cooking time'''
    
    def mealEqual(self, other):

        if self.MealType == other.MealType:
            return True
        return False

    def cuisineEqual(self, other):

        if self.CuisineType == other.CuisineType:
            return True
        return False

    def timeEqual(self, other):

        if self.time == other.time:
            return True
        return False 

    def displayName(self):

        #displays all information related to the recipe 

        print(self.recipeName)
        
    def displayIngrediants(self):

        print("Here are the ingrediants: ")
        for i in self.ingrediants:
            print(i)

    def displayInstructions(self):

        print("Here are the cooking steps: ")
        for i in self.instructions:
            print(i)

    def displayRecipe(self):

        print("") 
        print("Here is a related recipe: ")
        print("") 
        self.displayName()
        print("")
        print("This recipe takes", self.time, "minutes")
        print("")
        self.displayIngrediants()
        print("")
        self.displayInstructions()
        print("") 
        

#list of sample recipes

one = Recipe("Dinner", "American", "40", ["Buns", "Patties", "Lettuce", "Condiments"], "American Burgers", ["Put the patties on the grill", "Toast the buns", "Assemble the burger"])
two = Recipe("Lunch", "French", "20", ["Soup Broth", "Spices", "Water"], "French Soup",["Head broth", "Add spices", "Consume"])
three = Recipe("Dinner", "Indian", "60", ["Chicken", "Curry Powder", "Rice", "Mixed Veggies"], "Chicken Curry", ["Cook rice", "Stir fry veggies", "Add Currey power", "Add chicken", "Consume"]) 
        

listRecipes = [one, two, three] 

def getMealType():

    #function that returns the type of meal the user is interested in

    print("Snack? Breakfast? Lunch? Dinner?")
    mealType = input("What type of meal are you interested in preparing?: ")
    return mealType
    
def getCuisineType():

    #function that returns the type of cuisine the user is interestd in

    cuisines = ["American", "French", "Arab", "Indian", "Asian"]

    for i in cuisines:
        print(i)

    cuisineType = input("Please enter the type of cuisine you are interested in preparing?: ")

    return cuisineType

def getTime():

    time = input("How much time do you have? (if not important -- type \'ignore\'): ")
    return time

def findRecipe():

    #using given time, meal type and cuisine type, this function finds a related recipe
    
    a = getMealType()
    b = getCuisineType()
    c = getTime()

    desired = Recipe(a,b,c)

    for recipe in listRecipes:
        if desired.mealEqual(recipe) == True:

            if b == "ignore":
                recipe.displayRecipe()
                return True 
 
            elif desired.cuisineEqual(recipe) == True:

                if c == "ignore":
                    recipe.displayRecipe()
                    return True 
                    
                elif desired.timeEqual(recipe) == True:
                    recipe.displayRecipe() 
                    return True

                else:
                    print("There are no recipes that match your time criteria")

                    print("") 
                    print("There is a recipe that takes", recipe.time)
                    answer = input("Would you like to try that?: ") 

                    if answer == "yes" or "Yes":
                        recipe.displayRecipe()
                        return True 

                    else:
                        return False
                    
    return False
